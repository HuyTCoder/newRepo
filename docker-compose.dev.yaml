services:
  service-user:
    build:
      context: ./user_service
      dockerfile: Dockerfile.dev
    container_name: service-user
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8010:8001"
    networks:
      - healthcare_net
    environment:
      - POSTGRES_DB=user_service_db
      - POSTGRES_USER=mcuong1011
      - POSTGRES_PASSWORD=mcuong1011
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8001"
  service-auth:
    build:
      context: ./auth_service
      dockerfile: Dockerfile.dev
    container_name: service-auth
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8001:8001"
    networks:
      - healthcare_net
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8001"
  service-doctor:
    build:
      context: ./doctor_service
      dockerfile: Dockerfile.dev
    container_name: service-doctor
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8002:8002"
    networks:
      - healthcare_net
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8002"
  service-appointment:
    build:
      context: ./appointment_service
      dockerfile: Dockerfile.dev
    container_name: service-appointment
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8003:8003"
    networks:
      - healthcare_net
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8003"
  service-patient:
    build:
      context: ./patient_service
      dockerfile: Dockerfile.dev
    container_name: service-patient
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8004:8004"
    networks:
      - healthcare_net
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8004"
  service-laboratory:
    build:
      context: ./laboratory_service
      dockerfile: Dockerfile
    container_name: service-laboratory
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8005:8000"
    networks:
      - healthcare_net
    environment:
      - POSTGRES_DB=laboratory_db
      - POSTGRES_USER=mcuong1011
      - POSTGRES_PASSWORD=mcuong1011
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  service-prescription:
    build:
      context: ./prescription_service
      dockerfile: Dockerfile
    container_name: service-prescription
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8006:8000"
    networks:
      - healthcare_net
    environment:
      - MYSQL_DATABASE=prescription_db
      - MYSQL_USER=mcuong1011
      - MYSQL_PASSWORD=mcuong1011
      - MYSQL_HOST=mysql_db
      - MYSQL_PORT=3306
    command: sh -c "sleep 10 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  service-pharmacy:
    build:
      context: ./pharmacy_service
      dockerfile: dockerfile
    container_name: service-pharmacy
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8007:8000"
    networks:
      - healthcare_net
    environment:
      - POSTGRES_DB=pharmacy_db
      - POSTGRES_USER=mcuong1011
      - POSTGRES_PASSWORD=mcuong1011
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  service-payment:
    build:
      context: ./payment_service
      dockerfile: Dockerfile
    container_name: service-payment
    depends_on:
      mysql:
        condition: service_healthy
      service-appointment:
        condition: service_started
    ports:
      - "8008:8000"
    networks:
      - healthcare_net
    environment:
      - NGROK_DOMAIN=ethical-coral-apparently.ngrok-free.app
    command: sh -c "sleep 5 && python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  # service-chatbot:
  #   build:
  #     context: ./chatbot_service
  #     dockerfile: Dockerfile
  #   container_name: service-chatbot
  #   ports:
  #     - "8009:5000"
  #   networks:
  #     - healthcare_net
  #   command: python main.py
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    depends_on:
      service-auth:
        condition: service_started
      service-doctor:
        condition: service_started
      service-appointment:
        condition: service_started
      service-patient:
        condition: service_started
      service-laboratory:
        condition: service_started
      service-prescription:
        condition: service_started
      service-pharmacy:
        condition: service_started
      # service-chatbot:
      #   condition: service_started
    ports:
      - "8080:8080"
    networks:
      - healthcare_net
    command: sh -c "sleep 15 && python main.py"
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: healthcare_sys
      MYSQL_USER: mcuong1011
      MYSQL_PASSWORD: mcuong1011
    ports:
      - "3306:3306"
    volumes:
      - healthcare_mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - healthcare_net
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-prootpassword",
        ]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: mcuong1011
      POSTGRES_PASSWORD: mcuong1011
    ports:
      - "5432:5432"
    volumes:
      - healthcare_postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - healthcare_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcuong1011"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

volumes:
  healthcare_mysql_data:
    driver: local
  healthcare_postgres_data:
    driver: local
networks:
  healthcare_net:
    driver: bridge
